from datetime import datetime
from pes import pesExit
import logging
import math
import ConfigParser
import sdl2
import sdl2.video
import sdl2.ext
import sdl2.sdlgfx
import sdl2.sdlttf
import sdl2.joystick
import sdl2.timer
import sys
from ctypes import c_int, c_uint32, byref

def createText(renderer, font, txt, colour):
	surface = sdl2.sdlttf.TTF_RenderText_Blended(font, txt, colour)
	texture = sdl2.SDL_CreateTextureFromSurface(renderer, surface)
	sdl2.SDL_FreeSurface(surface)
	return texture

def renderText(renderer, font, txt, colour, x, y):
	texture = createText(renderer, font, txt, colour)
	(w, h) = getTextureDimensions(texture)
	sdl2.SDL_RenderCopy(renderer, texture, None, sdl2.SDL_Rect(x, y, w, h))
	return (w, h)
	
def getTextureDimensions(texture):
	flags = c_uint32()
	access = c_int()
	w = c_int()
	h = c_int()
	ret = sdl2.SDL_QueryTexture(texture, byref(flags), byref(access), byref(w), byref(h))
	return (w.value, h.value)

class PESApp(object):
	
	def __del__(self):
		logging.debug("PESApp.del: deleting object")
		if getattr(self, "__window", None):
			logging.debug("PESApp.del: window destroyed")
			sdl2.video.SDL_DestroyWindow(self.__window)
			self.__window = None

	def __init__(self, dimensions, fontFile, backgroundColour, menuBackgroundColour, headerBackgroundColour, lineColour, textColour, menuTextColour, menuSelectedTextColour, consoles):
		super(PESApp, self).__init__()
		self.__dimensions = dimensions
		self.fontFile = fontFile
		self.consoles = consoles
		
		self.lineColour = sdl2.SDL_Color(lineColour[0], lineColour[1], lineColour[2])
		self.backgroundColour = sdl2.SDL_Color(backgroundColour[0], backgroundColour[1], backgroundColour[2])
		self.headerBackgroundColour = sdl2.SDL_Color(headerBackgroundColour[0], headerBackgroundColour[1], headerBackgroundColour[2])
		self.menuBackgroundColour = sdl2.SDL_Color(menuBackgroundColour[0], menuBackgroundColour[1], menuBackgroundColour[2])
		self.menuTextColour = sdl2.SDL_Color(menuTextColour[0], menuTextColour[1], menuTextColour[2])
		self.menuSelectedTextColour = sdl2.SDL_Color(menuSelectedTextColour[0], menuSelectedTextColour[1], menuSelectedTextColour[2])
		self.menuSelectedBgColour = self.lineColour
		self.textColour = sdl2.SDL_Color(textColour[0], textColour[1], textColour[2])
		
		self.__headerHeight = 36
		#self.__footerHeight = self.__headerHeight
		self.__footerHeight = 0
		
		# redraw hints
		#self.redrawMainMenu = True
		#self.__screenChange = True
		# call SDL2 directly to probe joysticks
		#SDL_Init(SDL_INIT_JOYSTICK)
		#self.joystickTotal = SDLJoystick.SDL_NumJoysticks()
		#print "Joysticks: %d " % self.joystickTotal
		#for i in range(0, self.joystickTotal):
		#   print SDLJoystick.SDL_JoystickNameForIndex(i)
        
	def run(self):
		sdl2.ext.init()
		
		videoMode = sdl2.video.SDL_DisplayMode()
		if sdl2.video.SDL_GetCurrentDisplayMode(0, videoMode) != 0:
			pesExit("PESApp.run: unable to get current video mode!")
			
		logging.debug("PESApp.run: video mode (%d, %d), refresh rate: %dHz" % (videoMode.w, videoMode.h, videoMode.refresh_rate))
		
		if self.__dimensions[0] == 0 or self.__dimensions == 0:
			# assume full screen
			logging.debug("PESApp.run: running fullscreen")
			self.__dimensions = (videoMode.w, videoMode.h)
			self.__window = sdl2.video.SDL_CreateWindow('PES', sdl2.video.SDL_WINDOWPOS_UNDEFINED, sdl2.video.SDL_WINDOWPOS_UNDEFINED, self.__dimensions[0], self.__dimensions[1], sdl2.video.SDL_WINDOW_FULLSCREEN_DESKTOP)
		else:
			# windowed
			logging.debug("PESApp.run: running windowed")
			self.__window = sdl2.video.SDL_CreateWindow('PES', sdl2.video.SDL_WINDOWPOS_UNDEFINED, sdl2.video.SDL_WINDOWPOS_UNDEFINED, self.__dimensions[0], self.__dimensions[1], sdl2.video.SDL_WINDOW_HIDDEN)
		
		sdl2.sdlttf.TTF_Init()
		sdl2.video.SDL_ShowWindow(self.__window)
		self.__joystickTotal = sdl2.joystick.SDL_NumJoysticks()
        ##print "Joysticks: %d " % self.__joystickTotal
        ##for i in range(0, self.__joystickTotal):
        #   print sdl2.joystick.SDL_JoystickNameForIndex(i)
		#surface = self.__window.get_surface()
		#surface = sdl2.video.SDL_GetWindowSurface(self.__window).contents
		
		context = sdl2.ext.Renderer(self.__window.contents)
		
		#logging.debug("PESApp.run: surface dimensions: (%d, %d)" % (surface.w, surface.h))
		logging.debug("PESApp.run: window dimensions: (%d, %d)" % (self.__dimensions[0], self.__dimensions[1]))
		
		self.menuFont = sdl2.sdlttf.TTF_OpenFont(self.fontFile, 20)
		self.fontTitle = sdl2.sdlttf.TTF_OpenFont(self.fontFile, 20)
		self.fontBody = sdl2.sdlttf.TTF_OpenFont(self.fontFile, 18)
				
		# pre-initialise screens
		self.__screens = {}
		self.__screens["Home"] = HomePanel(self)
		#self.__screens["Settings"] = SettingsPanel(self)
		#self.__screens["UpdateDb"] = UpdateDbPanel(self)
		
		self.__screenStack = ["Home"]
		
		self.mainMenu = Menu([])
		self.mainMenu.addItem(MenuItem("Home"))
		#for c in self.consoles:
		#	self.mainMenu.addItem(ConsoleMenuItem(c))
		#	self.__screens["Console %s" % c.getName()] = GamesPanel(self, c)
		#self.mainMenu.addItem(MenuItem("Settings"))
		self.mainMenu.addItem(MenuItem("Reboot"))
		self.mainMenu.addItem(MenuItem("Power Off"))
		self.mainMenu.addItem(MenuItem("Exit"))
		self.mainMenu.setSelected(0)
		
		menuPanel = MainMenuPanel(self, True)
		
		menuWidth = 250
		#menuHeight = surface.h - self.__footerHeight - self.__headerHeight
		menuHeight = self.__dimensions[1] - self.__footerHeight - self.__headerHeight
		menuMargin = 10
		
		font = sdl2.sdlttf.TTF_OpenFont(self.fontFile, 22)
		
		#sdl2.ext.fill(surface, self.backgroundColour) # fill bg
		#sdl2.ext.fill(surface, self.headerBackgroundColour, [0, self.__dimensions[1] - self.__footerHeight, surface.w, self.__headerHeight]) # fill footer bg
		#sdl2.ext.line(surface, self.lineColour, (0, self.__headerHeight, surface.w, self.__headerHeight))
		#sdl2.ext.line(surface, self.__lineColour, (0, self.__dimensions[1] - self.__footerHeight, surface.w, self.__dimensions[1] - self.__footerHeight))
		
		#headerTextSurface = sdl2.sdlttf.TTF_RenderText_Blended(font, 'Pi Entertainment System', self.textColour)
		#sdl2.ext.fill(surface, self.headerBackgroundColour, [0, 0, surface.w, self.__headerHeight]) # fill header bg
		#sdl2.SDL_BlitSurface(headerTextSurface, None, surface, sdl2.SDL_Rect(10, 0, headerTextSurface.contents.w, headerTextSurface.contents.h))
		
		#screenRect = [menuWidth + 1, self.__headerHeight + 1, surface.w - menuWidth + 1, surface.h - self.__headerHeight + 1]
		screenRect = [menuWidth + 1, self.__headerHeight + 1, self.__dimensions[0] - menuWidth + 1, self.__dimensions[1] - self.__headerHeight + 1]
		
		context.clear(self.backgroundColour)
		headerTexture = createText(context.renderer, font, "Pi Entertainment System", self.textColour)
		(headerTextureWidth, headerTextureHeight) = getTextureDimensions(headerTexture)
		
		sdl2.sdlgfx.rectangleRGBA(context.renderer, 0, self.__headerHeight, self.__dimensions[0], self.__dimensions[1], self.lineColour.r, self.lineColour.g, self.lineColour.b, 255) # header line
		sdl2.sdlgfx.boxRGBA(context.renderer, 0, 0, self.__dimensions[0], self.__headerHeight, self.headerBackgroundColour.r, self.headerBackgroundColour.g, self.headerBackgroundColour.b, 255) # header bg
		sdl2.SDL_RenderCopy(context.renderer, headerTexture, None, sdl2.SDL_Rect(5, 0, headerTextureWidth, headerTextureHeight)) # header text
		
		running = True
		
		while running:
			events = sdl2.ext.get_events()
			for event in events:
				# keyboard events
				if event.type == sdl2.SDL_KEYDOWN:
					if event.key.keysym.sym == sdl2.SDLK_BACKSPACE:
						logging.debug("PESApp.run: trapping backspace key event")
						#if not menuPanel.active:
						#	menuPanel.setActive(True)
						#	self.__screens[self.__currentScreen].setActive(False)
						s = self.__screenStack.pop()
						logging.debug("PESApp.run: screen stack length: %d" % len(self.__screenStack))
						if len(self.__screenStack) == 1:
							menuPanel.setActive(True)
							self.__screens[s].setActive(False)
							self.__screens[s].draw(context.renderer, screenRect) # redraw popped screen one last time
						else:
							self.setScreen(self.__screenStack[-1], True, False)
							self.__screens[s].setActive(False)
					if event.key.keysym.sym == sdl2.SDLK_ESCAPE:
						logging.debug("PESApp.run: trapping escape key event")
						running = False
						break
					if menuPanel.active:
						menuPanel.processEvent(event)
					elif self.__screens[self.__screenStack[-1]].active:
						self.__screens[self.__screenStack[-1]].processEvent(event)
				# joystick events
				if event.type == sdl2.SDL_QUIT:
					running = False
					break
			
			#menuPanel.draw(surface, [0, self.__headerHeight + 1, menuWidth, menuHeight])
			menuPanel.draw(context.renderer, [0, self.__headerHeight + 1, menuWidth, menuHeight])
			#self.__screens[self.__screenStack[-1]].draw(surface, screenRect)
			self.__screens[self.__screenStack[-1]].draw(context.renderer, screenRect)
			
			now = datetime.now()
			#dateTimeSurface = sdl2.sdlttf.TTF_RenderText_Blended(font, now.strftime("%H:%M:%S %d/%m/%Y"), self.textColour)
			#sdl2.ext.fill(surface, self.headerBackgroundColour, [surface.w - dateTimeSurface.contents.w - 5, 0, dateTimeSurface.contents.w, self.__headerHeight]) # clear date text
			#sdl2.SDL_BlitSurface(dateTimeSurface, None, surface, sdl2.SDL_Rect(surface.w - dateTimeSurface.contents.w - 5, 0, 1, 1))
			dateTexture = createText(context.renderer, font, now.strftime("%H:%M:%S %d/%m/%Y"), self.textColour)
			(dateTextureWidth, dateTextureHeight) = getTextureDimensions(dateTexture)
			sdl2.sdlgfx.boxRGBA(context.renderer, self.__dimensions[0] - dateTextureWidth - 5, 0, self.__dimensions[0] - 5, dateTextureHeight, self.headerBackgroundColour.r, self.headerBackgroundColour.g, self.headerBackgroundColour.b, 255)
			sdl2.SDL_RenderCopy(context.renderer, dateTexture, None, sdl2.SDL_Rect(self.__dimensions[0] - dateTextureWidth - 5, 0, dateTextureWidth, dateTextureHeight))
			context.present()
			sdl2.SDL_Delay(10) # very important: frees up CPU time and makes application much more responsive!
			#sdl2.video.SDL_UpdateWindowSurface(self.__window)
		
		sdl2.sdlttf.TTF_CloseFont(font)
		sdl2.sdlttf.TTF_Quit()
		sdl2.ext.quit()
		logging.info("exiting...")
		
	def setScreen(self, screen, activate, push=False):
		if not screen in self.__screens:
			logging.warning("PESApp.setScreen: invalid screen selection \"%s\"" % screen)
		else:
			logging.debug("PESApp.setScreen: setting current screen to \"%s\", activating: %s" % (screen, activate))
			self.__screens[screen].setActive(False)
			#self.__currentScreen = screen
			if push:
				logging.debug("PESApp.setScreen: adding screen \"%s\" to screen stack" % screen)
				self.__screenStack.append(screen)
			self.__screens[screen].setActive(activate)
		
		
class Menu(object):
	
	def __init__(self, items, toggle=False):
		super(Menu, self).__init__()
		self.__selected = 0
		self.__items = items
		self.__toggle = toggle
		logging.debug("Menu.init: Menu initialised")
	
	def addItem(self, item):
		self.__items.append(item)
		
	def getItem(self, i):
		return self.__items[i]
		
	def getItems(self):
		return self.__items
	
	def getSelectedIndex(self):
		return self.__selected
	
	def getSelectedItem(self):
		return self.__items[self.__selected]
	
	def getCount(self):
		return len(self.__items)
	
	def isTogglable(self):
		return self.__toggle
		
	def setSelected(self, i):
		if i >= 0 and i < len(self.__items):
			self.__items[self.__selected].setSelected(False)
			self.__selected = i
			self.__items[self.__selected].setSelected(True)
			return
		raise ValueError("Menu.setSelected: invalid value for i: %s" % i)
	
class MenuItem(object):
	
	def __init__(self, text, selected = False, callback = None, *callbackArgs):
		super(MenuItem, self).__init__()
		self.__text = text
		self.__selected = selected
		self.__callback = callback
		self.__toggled = False
		self.__callbackArgs = callbackArgs
	
	def getText(self):
		return self.__text
	
	def isSelected(self):
		return self.__selected
	
	def isToggled(self):
		return self.__toggled
	
	def toggle(self, t):
		self.__toggled = t
	
	def setSelected(self, selected):
		self.__selected = selected
	
	def setText(text):
		self.__text = text
		
	def trigger(self):
		if self.__callback:
			logging.debug("MenuItem.trigger: calling function for %s menu item" % self.__text)
			if self.__callbackArgs:
				self.__callback(*self.__callbackArgs)
			else:
				self.__callback()
		else:
			logging.warning("MenuItem.trigger: no callback defined for %s menu item" % self.__text)
		
	def __repr__(self):
		return "<MenuItem: text: %s >" % self.__text
		
class ConsoleMenuItem(MenuItem):
	
	def __init__(self, console):
		super(ConsoleMenuItem, self).__init__(console.getName())
		self.__console = console

class Panel(object):
	
	margin = 5 # default margin for all screens
	
	def __init__(self, app, name, active):
		super(Panel, self).__init__()
		self.app = app
		self.name = name
		self.active = active
		self.redraw = True
	
	def draw(self, renderer, rect):
		pass
	
	def drawText(self, font, text, x, y, width, surface, colour):
		textSurf = sdl2.sdlttf.TTF_RenderText_Blended_Wrapped(font, text, colour, width)
		sdl2.SDL_BlitSurface(textSurf, None, surface, sdl2.SDL_Rect(x, y, textSurf.contents.w, textSurf.contents.h))
		return (textSurf.contents.w, textSurf.contents.h)
	
	def processEvent(self, event):
		pass
	
	def setActive(self, active):
		self.active = active
		logging.debug("Panel.setActive: \"%s\" activate state is now: %s" % (self.name, self.active))
		self.redraw = True
		
class MenuPanel(Panel):
	
	def __init__(self, menu, app, font, active=False):
		super(MenuPanel, self).__init__(app, "Menu", active)
		self.__menu = menu
		self.__app = app
		self.__font = font
		self.__fontHeight = sdl2.sdlttf.TTF_RenderText_Blended(self.__font, 'A', self.app.menuTextColour).contents.h
		logging.debug("MenuPanel.init: initialised")
		
	def draw(self, surface, rect):
		if self.redraw:
			logging.debug("MenuPanel.draw: drawing panel at (%d, %d) dimensions (%d, %d)" % (rect[0], rect[1], rect[2], rect[3]))
			
			x = rect[0]
			y = rect[1]
			w = rect[2]
			h = rect[3]
			
			textX = x
			if self.__menu.isTogglable():
				textX += 20
			
			visibleMenuItems = int(h / self.__fontHeight)
			menuItems = self.__menu.getItems()
			menuItemTotal = len(menuItems)
			
			logging.debug("MenuPanel.draw: visibleMenuItems = %d" % visibleMenuItems)
			
			sdl2.ext.fill(surface, self.app.backgroundColour, [x, y, w, h])
			
			currentY = y
			firstMenuItem = 0
			selectedIndex = self.__menu.getSelectedIndex()
			if selectedIndex >= firstMenuItem + visibleMenuItems:
				firstMenuItem = selectedIndex - visibleMenuItems + 1
			elif selectedIndex < firstMenuItem:
				firstMenuItem = selectedIndex
			
			i = firstMenuItem
			while i < menuItemTotal and i < firstMenuItem + visibleMenuItems:
					m = self.__menu.getItem(i)
					if m.isSelected():
						if self.active:
							sdl2.ext.fill(surface, self.app.menuSelectedBgColour, [x, currentY, w, self.__fontHeight + 2])
						else:
							sdl2.ext.fill(surface, self.app.menuTextColour, [x, currentY, w, self.__fontHeight + 2])
						if self.__menu.isTogglable():
							self.drawText(self.app.menuFont, "*", x, currentY, w, surface, self.app.textColour)
						self.drawText(self.app.menuFont, m.getText(), textX, currentY, w, surface, self.app.menuSelectedTextColour)
					else:
						if self.__menu.isTogglable():
							self.drawText(self.app.menuFont, "*", x, currentY, w, surface, self.app.textColour)
						self.drawText(self.app.menuFont, m.getText(), textX, currentY, w, surface, self.app.textColour)
					currentY += self.__fontHeight
					i += 1
			
			self.redraw = False
			
	def processEvent(self, event):
		if self.active:
			if event.key.keysym.sym == sdl2.SDLK_DOWN:
				logging.debug("MenuPanel.processEvent: key event: DOWN")
				i = self.__menu.getSelectedIndex()
				total = self.__menu.getCount()
				if i + 1 > total - 1:
					self.__menu.setSelected(0)
				else:
					self.__menu.setSelected(i + 1)
				self.redraw = True
			elif event.key.keysym.sym == sdl2.SDLK_UP:
				logging.debug("MenuPanel.processEvent: key event: UP")
				i = self.__menu.getSelectedIndex()
				total = self.__menu.getCount()
				if i - 1 < 0:
					self.__menu.setSelected(total - 1)
				else:
					self.__menu.setSelected(i - 1)
				self.redraw = True
			elif event.key.keysym.sym == sdl2.SDLK_RETURN or event.key.keysym.sym == sdl2.SDLK_KP_ENTER:
				logging.debug("MenuPanel.processEvent: key event: RETURN")
				self.__menu.getSelectedItem().trigger()
				self.redraw = True
	
class MainMenuPanel(Panel):
	
	def __init__(self, app, active=False):
		super(MainMenuPanel, self).__init__(app, "MainMenu", active)
		self.__menuMargin = 5
		self.__menuTopMargin = 5
		self.__menuFontHeight = sdl2.sdlttf.TTF_RenderText_Blended(self.app.menuFont, 'A', self.app.menuTextColour).contents.h
		logging.debug("MainMenuPanel.init: initialised")
		self.__lastTick = sdl2.timer.SDL_GetTicks()
		self.__menuItemChanged = False
		
	def __changeScreen(self, activate):
		screen = None
		m = self.app.mainMenu.getSelectedItem()
		if isinstance(m, ConsoleMenuItem):
			screen = "Console %s" % m.getText()
		else:
			screen = m.getText()
		self.app.setScreen(screen, activate, activate) # only push onto screen stack if activate is True, i.e. user pressed Enter
		
	def draw(self, renderer, rect):
		if self.active:
			tick = sdl2.timer.SDL_GetTicks()
			#if self.__menuItemChanged and tick - self.__lastTick >= 1000: # 3 seconds
			#	self.__lastTick = tick
			#	logging.debug("MainMenuPanel.draw: menu hover tick triggered!")
			#	self.__changeScreen(False)
			#	self.__menuItemChanged = False
			
		if self.redraw:
			logging.debug("MainMenuPanel.draw: drawing panel at (%d, %d) dimensions (%d, %d)" % (rect[0], rect[1], rect[2], rect[3]))
			x = rect[0]
			y = rect[1]
			w = rect[2]
			h = rect[3]
			menuTop = y + self.__menuTopMargin
			sdl2.sdlgfx.boxRGBA(renderer, x, y, x + w, y + h, self.app.menuBackgroundColour.r, self.app.menuBackgroundColour.g, self.app.menuBackgroundColour.b, 255)
			visibleMenuItems = int((h - self.__menuTopMargin) / self.__menuFontHeight)
			menuItems = self.app.mainMenu.getItems()
			menuItemTotal = len(menuItems)
			
			logging.debug("MainMenuPanel.draw: visibleMenuItems = %d" % visibleMenuItems)
			
			currentY = menuTop
			firstMenuItem = 0
			
			selectedIndex = self.app.mainMenu.getSelectedIndex()
			if selectedIndex >= firstMenuItem + visibleMenuItems:
				firstMenuItem = selectedIndex - visibleMenuItems + 1
			elif selectedIndex < firstMenuItem:
				firstMenuItem = selectedIndex
			
			i = firstMenuItem
			while i < menuItemTotal and i < firstMenuItem + visibleMenuItems:
					m = self.app.mainMenu.getItem(i)
					if m.isSelected():
						if self.active:
							sdl2.sdlgfx.boxRGBA(renderer, x + self.__menuMargin, currentY, x + self.__menuMargin + (w - (self.__menuMargin * 2)), currentY + self.__menuFontHeight, self.app.menuSelectedBgColour.r, self.app.menuSelectedBgColour.g, self.app.menuSelectedBgColour.b, 255)
						else:
							sdl2.sdlgfx.boxRGBA(renderer, x + self.__menuMargin, currentY, x + self.__menuMargin + (w - (self.__menuMargin * 2)), currentY + self.__menuFontHeight, self.app.menuTextColour.r, self.app.menuTextColour.g, self.app.menuTextColour.b, 255)
						renderText(renderer, self.app.menuFont, m.getText(), self.app.menuSelectedTextColour, self.__menuMargin, currentY)
					else:
						renderText(renderer, self.app.menuFont, m.getText(), self.app.menuTextColour, self.__menuMargin, currentY)
					currentY += self.__menuFontHeight
					i += 1
			
			self.redraw = False
		
	def processEvent(self, event):
		if self.active:
			if event.key.keysym.sym == sdl2.SDLK_DOWN:
				logging.debug("MainMenuPanel.processEvent: key event: DOWN")
				i = self.app.mainMenu.getSelectedIndex()
				total = self.app.mainMenu.getCount()
				if i + 1 > total - 1:
					self.app.mainMenu.setSelected(0)
				else:
					self.app.mainMenu.setSelected(i + 1)
				self.redraw = True
				self.__lastTick = sdl2.timer.SDL_GetTicks()
				self.__menuItemChanged = True
			elif event.key.keysym.sym == sdl2.SDLK_UP:
				logging.debug("MainMenuPanel.processEvent: key event: UP")
				i = self.app.mainMenu.getSelectedIndex()
				total = self.app.mainMenu.getCount()
				if i - 1 < 0:
					self.app.mainMenu.setSelected(total - 1)
				else:
					self.app.mainMenu.setSelected(i - 1)
				self.redraw = True
				self.__lastTick = sdl2.timer.SDL_GetTicks()
				self.__menuItemChanged = True
			elif event.key.keysym.sym == sdl2.SDLK_RETURN or event.key.keysym.sym == sdl2.SDLK_KP_ENTER:
				logging.debug("MainMenuPanel.processEvent: key event: RETURN")
				logging.debug("MainMenuPanel.processEvent: main menu now deactivated")
				self.__changeScreen(True)
				self.__menuItemChanged = False
				self.setActive(False)

class HomePanel(Panel):
	
	def __init__(self, app, active=False):
		super(HomePanel, self).__init__(app, "Home", active)
		logging.debug("HomePanel.init: initialised")
		
	def draw(self, renderer, rect):
		if self.redraw:
			logging.debug("HomePanel.draw: drawing panel")
			x = rect[0]
			y = rect[1]
			w = rect[2]
			h = rect[3]
			
			x += self.margin
			y += self.margin
			
			#sdl2.ext.fill(surface, self.app.backgroundColour, [x, y, w, h])
			
			#(textWidth, textHeight) = self.drawText(self.app.fontTitle, "Welcome to PES", x, y, w - (self.margin * 2), surface, self.app.textColour)
			#currentY = y + textHeight + 10
			#(textWidth, textHeight) = self.drawText(self.app.fontBody, "The home screen provides you with quick access to your favourite, new additions and most recently played games.", x, currentY, w - (self.margin * 2), surface, self.app.textColour)
			#currentY = y + textHeight + 10
			
			sdl2.sdlgfx.boxRGBA(renderer, x, y, x + w, y + h, self.app.backgroundColour.r, self.app.backgroundColour.g, self.app.backgroundColour.b, 255)
			(textWidth, textHeight) = renderText(renderer, self.app.fontTitle, "Welcome to PES", self.app.textColour, x, y)
			(textWidth, textHeight) = renderText(renderer, self.app.fontTitle, "The home screen provides you with quick access to your favourite, new additions and most recently played games.", self.app.textColour, x, y + textHeight) # MAKE THIS WRAP!
			
			self.redraw = False
			
class GamesPanel(Panel):
	
	def __init__(self, app, console, active=False):
		super(GamesPanel, self).__init__(app, console.getName(), active)
		self.__console = console
		logging.debug("GamesPanel.init: initialised for %s" % self.name)
		
	def draw(self, surface, rect):
		if self.redraw:
			logging.debug("GamesPanel.draw: drawing panel for %s" % self.__console.getName())
			
			x = rect[0]
			y = rect[1]
			w = rect[2]
			h = rect[3]
			
			x += self.margin
			y += self.margin
			
			sdl2.ext.fill(surface, self.app.backgroundColour, [x, y, w, h])
			(textWidth, textHeight) = self.drawText(self.app.fontTitle, self.__console.getName(), x, y, w - (self.margin * 2), surface, self.app.textColour)
			self.redraw = False
			
class SettingsPanel(Panel):
	
	def __init__(self, app, active=False):
		super(SettingsPanel, self).__init__(app, "Settings", active)
		self.__menu = Menu([
			MenuItem("Update Database", True, self.app.setScreen, "UpdateDb", True, True),
			#MenuItem("Update Database", True),
			MenuItem("Reset Database"),
			MenuItem("Joysticks"),
			MenuItem("Time Zone"),
			MenuItem("Keyboard")
		])
		self.__menuPanel = MenuPanel(self.__menu, app, self.app.fontBody)
		logging.debug("SettingsPanel.init: initialised")
		
	def draw(self, surface, rect):
		if self.redraw:
			logging.debug("SettingsPanel.draw: drawing screen, active: %s" % self.active)
			x = rect[0]
			y = rect[1]
			w = rect[2]
			h = rect[3]
			
			x += self.margin
			y += self.margin
			
			sdl2.ext.fill(surface, self.app.backgroundColour, [x, y, w, h])
			(textWidth, textHeight) = self.drawText(self.app.fontTitle, "Settings", x, y, w - (self.margin * 2), surface, self.app.textColour)
			
			currentY = y + textHeight + 20
			
			self.__menuPanel.draw(surface, [x, currentY, 400, h - currentY])

			self.redraw = False
			
	def processEvent(self, event):
		if self.active:
			logging.debug("SettingsPanel.processEvent: processing...")
			self.__menuPanel.processEvent(event)
			self.redraw = True
			
	def setActive(self, active):
		logging.debug("SettingsPanel.setActive: active state is now: %s" % active)
		self.__menuPanel.setActive(active)
		super(SettingsPanel, self).setActive(active)
		
class UpdateDbPanel(Panel):
	
	def __init__(self, app, active=False):
		super(UpdateDbPanel, self).__init__(app, "Update Database", active)
		menuItems = []
		for c in self.app.consoles:
			menuItems.append(MenuItem(c.getName()))
		menuItems[0].setSelected(True)
		self.__menu = Menu(menuItems, True)
		self.__menuPanel = MenuPanel(self.__menu, app, self.app.fontBody)
		
	def draw(self, surface, rect):
		if self.redraw:
			logging.debug("UpdateDbPanel.draw: drawing screen, active: %s" % self.active)
			x = rect[0]
			y = rect[1]
			w = rect[2]
			h = rect[3]
			
			x += self.margin
			y += self.margin
			
			sdl2.ext.fill(surface, self.app.backgroundColour, [x, y, w, h])
			(textWidth, textHeight) = self.drawText(self.app.fontTitle, "Update Database", x, y, w - (self.margin * 2), surface, self.app.textColour)
			currentY = y + (textHeight * 2)
			(textWidth, textHeight) = self.drawText(self.app.fontBody, "Use the menu below to toggle which directories will be scanned. When you are ready to begin, press the START button or SPACEBAR.", x, currentY, w - (self.margin * 2), surface, self.app.textColour)
			currentY += textHeight + 20
			
			self.__menuPanel.draw(surface, [x, currentY, 400, h - currentY])
			
			self.redraw = False
			
	def processEvent(self, event):
		if self.active:
			logging.debug("UpdateDbPanel.processEvent: processing...")
			self.__menuPanel.processEvent(event)
			self.redraw = True
			
	def setActive(self, active):
		logging.debug("UpdateDbPanel.setActive: active state is now: %s" % active)
		self.__menuPanel.setActive(active)
		super(UpdateDbPanel, self).setActive(active)